package com.secretBox.yutnori;


import org.cocos2d.actions.base.CCRepeatForever;
import org.cocos2d.actions.ease.CCEaseExponentialIn;
import org.cocos2d.actions.interval.CCAnimate;
import org.cocos2d.layers.CCLayer;
import org.cocos2d.nodes.CCAnimation;
import org.cocos2d.nodes.CCSprite;
import org.cocos2d.nodes.CCSpriteFrame;
import org.cocos2d.types.CGSize;

import android.view.MotionEvent;

import com.secretBox.yutnori.constants.YutnoriBasicConstants;
import com.secretBox.yutnori.constants.YutnoriLogicConstants;
import com.secretBox.yutnori.logic.YutSet;


public class YutThrowLayer extends CCLayer{
	public boolean isShow = false;
	public boolean isAni = false;
	CCSprite background;
	CCSprite[] yuts = new CCSprite[7];;
	CCSprite[] yutChars = new CCSprite[7];
	CCSprite yuts_animation; 
	
	
	
	CCSpriteFrame[] frames = new CCSpriteFrame[7];

	
	public YutThrowLayer()
	{
		
		background = CCSprite.sprite(YutnoriBasicConstants.YUT_THROW_LAYER);
		addChild(background);
		background.setOpacity(70);
		
		CCAnimation animation =  CCAnimation.animation("testAnimation",0.05f);

		for(String fileName:YutnoriLogicConstants.YUT_FILE_NAMES)
		{

			animation.addFrame(fileName);	
		}
		

		yuts_animation = CCSprite.sprite(YutnoriLogicConstants.YUT_FILE_NAMES[0]);
		
		CCAnimate animate = CCAnimate.action(animation);
		CCEaseExponentialIn easeAction = CCEaseExponentialIn.action(animate);
		
		CCRepeatForever animates =  CCRepeatForever.action(easeAction);
		yuts_animation.runAction(animates);
		addChild(yuts_animation);
		

			
		CGSize backgroundSize = background.getContentSize();
		
		float yutCharPointWidth = backgroundSize.width/ 2;
		float yutCharPointHeight = backgroundSize.height /2;
		yutCharPointWidth  = (yutCharPointWidth /3 )*2;
		yutCharPointHeight = (yutCharPointHeight/3 )*2;
		
		for(int i=0;i<yuts.length;i++)
		{

			yuts[i] = CCSprite.sprite(YutnoriLogicConstants.YUT_FILE_NAMES[i]);
			yutChars[i] = CCSprite.sprite(YutnoriLogicConstants.YUT_CHAR_FILE_NAMES[i]);
			yutChars[i].setPosition(yutCharPointWidth,yutCharPointHeight);
			 
			addChild(yuts[i]);
			addChild(yutChars[i]);
			yuts[i].setVisible(false);
			yutChars[i].setVisible(false);
			
		}
		this.setIsTouchEnabled(true);
		
		
	}
	private void initYuts()
	{
		for(int i=0;i<yuts.length;i++)
		{
			yuts[i].setVisible(false);
		}
		for(int i=0;i<yutChars.length;i++)
		{
			yutChars[i].setVisible(false);
		}
	}
	
	@Override
	public boolean ccTouchesEnded(MotionEvent e)
	{
		initYuts();
		YutSet.PROPERTY yutProperty = GameManager.getGame().throwYuts();
		yuts_animation.setVisible(false);
		
		if(yutProperty ==YutSet.PROPERTY.NAK)
		{
			yuts[0].setVisible(true);
			yutChars[0].setVisible(true);
		}
		else if(yutProperty ==YutSet.PROPERTY.BACKDO)
		{
			yuts[1].setVisible(true);
			yutChars[1].setVisible(true);
			
		}else if(yutProperty ==YutSet.PROPERTY.DO)
		{
			yuts[2].setVisible(true);
			yutChars[2].setVisible(true);
			
		}else if(yutProperty ==YutSet.PROPERTY.GE)
		{
			yuts[3].setVisible(true);
			yutChars[3].setVisible(true);
			
		}else if(yutProperty ==YutSet.PROPERTY.GUL)
		{
			yuts[4].setVisible(true);
			yutChars[4].setVisible(true);
		}
		else if(yutProperty ==YutSet.PROPERTY.YUT)
		{
			yuts[5].setVisible(true);
			yutChars[5].setVisible(true);
		}
		else if(yutProperty ==YutSet.PROPERTY.MO)
		{
			yuts[6].setVisible(true);
			yutChars[6].setVisible(true);
		}
	
		return true; 
		
	}
	

	public void callbackYutShow(Object Sender)
	{
		
	//	if()//나의 턴인경우
		{
			GameManager.getGame().changeStep();
	//	}else//적의 턴인경우
		
			
		}
		
	}
	

}
